<!DOCTYPE html>
<!-- saved from url=(0041)http://layer.layui.com/api.html#layer.msg -->
<html xmlns:wb="http://open.weibo.com/wb"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>layer API 帮助文档</title>
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=0">

<link rel="stylesheet" href="./layer API 帮助文档_files/layui.css" media="all">
<link rel="stylesheet" href="./layer API 帮助文档_files/global.css" media="all">

<link rel="stylesheet" href="./layer API 帮助文档_files/font_1429334277_9339297.css" media="all">
<link rel="stylesheet" href="./layer API 帮助文档_files/demo.css" media="all">

<script type="text/javascript" async="" charset="utf-8" src="./layer API 帮助文档_files/core.php"></script><script src="./layer API 帮助文档_files/ca-pub-6111334333458862.js"></script><script src="./layer API 帮助文档_files/jquery.min.js"></script>
<script src="./layer API 帮助文档_files/layer.js"></script><link rel="stylesheet" href="./layer API 帮助文档_files/layer.css" id="layuicss-layer">
<link rel="stylesheet" href="./layer API 帮助文档_files/style.css" id="layuicss-thememoonstylecss"><link rel="preload" href="./layer API 帮助文档_files/integrator.js" as="script"><script type="text/javascript" src="./layer API 帮助文档_files/integrator.js"></script><link id="layuicss-skincodecss" rel="stylesheet" href="./layer API 帮助文档_files/code.css" media="all"></head>
<body style="">

<div class="header">
  <div class="layui-main">
    <a class="logo" href="http://www.layui.com/">
      <img src="./layer API 帮助文档_files/logo.png" alt="layui">
    </a>
    <span class="menu">
      <a href="http://layer.layui.com/" class="this">layer</a>
      <a href="http://www.layui.com/alone/">独立组件</a>
      <a href="http://fly.layui.com/">社区</a>
    </span>
  </div>
</div>


<div class="clearfix layer-api-main">
  <div class="layer-api layer-api-fix">
    <h2>
      <i class="iconfont icon-caidan"></i>
      基础参数
      <span class="iconfont layer-api-ico icon-shousuo"></span>
    </h2>
    <ul>
      <li><a href="http://layer.layui.com/api.html#type">type</a></li>
      <li><a href="http://layer.layui.com/api.html#title">title</a></li>
      <li><a href="http://layer.layui.com/api.html#content">content</a></li>
      <li><a href="http://layer.layui.com/api.html#skin">skin</a></li>
      <li><a href="http://layer.layui.com/api.html#area">area</a></li>
      <li><a href="http://layer.layui.com/api.html#offset">offset</a></li>
      <li><a href="http://layer.layui.com/api.html#icon">icon</a></li>
      <li><a href="http://layer.layui.com/api.html#btn">btn</a></li>
      <li><a href="http://layer.layui.com/api.html#closeBtn">closeBtn</a></li>
      <li><a href="http://layer.layui.com/api.html#shade">shade</a></li>
      <li><a href="http://layer.layui.com/api.html#shadeClose">shadeClose</a></li>
      <li><a href="http://layer.layui.com/api.html#time">time</a> </li>
      <li><a href="http://layer.layui.com/api.html#id">id</a> </li>
      <li><a href="http://layer.layui.com/api.html#shift">shift</a> </li>
      <li><a href="http://layer.layui.com/api.html#maxmin">maxmin</a> </li>
      <li><a href="http://layer.layui.com/api.html#fix">fix</a> </li>
      <li><a href="http://layer.layui.com/api.html#scrollbar">scrollbar</a> </li>
      <li><a href="http://layer.layui.com/api.html#maxWidth">maxWidth<cite>（私有）</cite></a></li>
      <li><a href="http://layer.layui.com/api.html#zIndex">zIndex</a> </li>
      <li><a href="http://layer.layui.com/api.html#move">move</a> </li>
      <li><a href="http://layer.layui.com/api.html#moveType">moveType</a> </li>
      <li><a href="http://layer.layui.com/api.html#moveOut">moveOut</a> </li>
      <li><a href="http://layer.layui.com/api.html#moveEnd">moveEnd<cite>（回调）</cite></a> </li>
      <li><a href="http://layer.layui.com/api.html#tips">tips<cite>（私有）</cite></a></li>
      <li><a href="http://layer.layui.com/api.html#tipsMore">tipsMore<cite>（私有）</cite></a> </li>
      <li><a href="http://layer.layui.com/api.html#success">success<cite>（回调）</cite></a> </li>
      <li><a href="http://layer.layui.com/api.html#yes">yes<cite>（回调）</cite></a> </li>
      <li><a href="http://layer.layui.com/api.html#cancel">cancel<cite>（回调）</cite></a> </li>
      <li><a href="http://layer.layui.com/api.html#end">end<cite>（回调）</cite></a> </li>
      <li><a href="http://layer.layui.com/api.html#full" style="padding-left:0;">full/min/restore<cite>(回调)</cite></a> </li>
    </ul>
    
    <h2>
      <i class="iconfont icon-caidan"></i>
      内置方法
      <span class="iconfont layer-api-ico icon-shousuo"></span>
    </h2>
    <ul>
      <li><a href="http://layer.layui.com/api.html#layer.config">layer.config()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.ready">layer.ready()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.open">layer.open()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.alert">layer.alert()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.confirm">layer.confirm()</a></li>
      <li class="layer-api-slecked"><a href="http://layer.layui.com/api.html#layer.msg">layer.msg()</a></li>
      <li class=""><a href="http://layer.layui.com/api.html#layer.load">layer.load()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.tips">layer.tips()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.close">layer.close()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.closeAll">layer.closeAll()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.style">layer.style()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.title">layer.title()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.getChildFrame">layer.getChildFrame()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.getFrameIndex">layer.getFrameIndex()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.iframeAuto">layer.iframeAuto()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.iframeSrc">layer.iframeSrc()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.setTop">layer.setTop()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.full">layer.full()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.full">layer.min()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.full">layer.restore()</a></li>
    </ul>
    
    <h2>
      <i class="iconfont icon-caidan"></i>
      其他内置层
      <span class="iconfont layer-api-ico icon-shousuo"></span>
    </h2>
    <ul>
      <li><a href="http://layer.layui.com/api.html#layer.prompt">layer.prompt()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.tab">layer.tab()</a></li>
      <li><a href="http://layer.layui.com/api.html#layer.photos">layer.photos()</a></li>
    </ul>
  </div>
  
  <div class="layer-api-run" style="top: 0px;">
    <div class="runtest" style="display: block;">
      <textarea id="testmain">layer.open({
  title: 'test',
  content: 'hello layer'
});     </textarea>
      <a href="javascript:;" onclick="try{new Function($(&#39;#testmain&#39;).val())();}catch(e){alert(&#39;语句异常：&#39;+e.message)}" class="btns">在线调试</a>
    </div>
    
    
  </div>
  
  <div class="layer-api-content">
    <div class="layer-text">
      <p>本文档主要针对layer1.9及以上版本，如果您项目中使用的是1.9之前的版本，请前往<a href="http://layer.layui.com/1.8.5/api.html">1.8.5文档页</a>。</p>
      <p>我们提到的基础参数主要指调用方法时用到的配置项，如：<code>layer.open({content: ''})</code><code>layer.msg('', {time: 3})</code>等，其中的content和time即是基础参数，以键值形式存在，基础参数<em>可合理应用于任何层类型中</em>，您不需要所有都去配置，大多数都是可选的。而其中的layer.open、layer.msg就是内置方法。注意，从2.3开始，无需通过layer.config来加载拓展模块</p>
    </div>
    
    <!-- layer-728*90 -->
    <ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-6111334333458862" data-ad-slot="4800491433" data-adsbygoogle-status="done"><ins id="aswift_0_expand" style="display:inline-table;border:none;height:90px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><ins id="aswift_0_anchor" style="display:block;border:none;height:90px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent;"><iframe width="728" height="90" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;width:728px;height:90px;" src="./layer API 帮助文档_files/saved_resource.html"></iframe></ins></ins></ins>
    
    <h2>基础参数</h2>
    
    <dl>
      <dt><a name="type">type</a> - 基本层类型</dt>
      <dd>
        <p><span>类型</span>：Number，<span>默认</span>：0</p>
        <p>layer提供了5种层类型。可传入的值有：<code>0</code>（信息框，默认）<code>1</code>（页面层）<code>2</code>（iframe层）<code>3</code>（加载层）<code>4</code>（tips层）。
    若你采用<code>layer.open({type: 1})</code>方式调用，则type为必填项（信息框除外）</p>
      </dd>
      
      <dt><a name="title">title</a> - 标题</dt>
      <dd>
        <p><span>类型</span>：String/Array/Boolean，<span>默认</span>：'信息'</p>
        <p>title支持三种类型的值，若你传入的是普通的字符串，如<code>title
        :'我是标题'</code>，那么只会改变标题文本；若你还需要自定义标题区域样式，那么你可以<code>title: ['文本', 'font-size:18px;']</code>，数组第二项可以写任意css样式；如果你不想显示标题栏，你可以<code>title: false</code></p>
      </dd>
      
      <dt><a name="content">content</a> - 内容</dt>
      <dd>
        <p><span>类型</span>：String/DOM/Array，<span>默认</span>：''</p>
        <p>content可传入的值是灵活多变的，不仅可以传入普通的html内容，还可以指定DOM，更可以随着type的不同而不同。譬如：</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>/!*</li><li> 如果是页面层</li><li> */</li><li>layer.open({</li><li>  type: 1, </li><li>  content: '传入任意的文本或html' //这里content是一个普通的String</li><li>});</li><li>layer.open({</li><li>  type: 1,</li><li>  content: $('#id') //这里content是一个DOM</li><li>});</li><li>//Ajax获取</li><li>$.post('url', {}, function(str){</li><li>  layer.open({</li><li>    type: 1,</li><li>    content: str //注意，如果str是object，那么需要字符拼接。</li><li>  });</li><li>});</li><li>/!*</li><li> 如果是iframe层</li><li> */</li><li>layer.open({</li><li>  type: 2, </li><li>  content: 'http://sentsin.com' //这里content是一个URL，如果你不想让iframe出现滚动条，你还可以<code>content: ['http://sentsin.com', 'no']</code></li><li>}); </li><li>/!*</li><li> 如果是用layer.open执行tips层</li><li> */</li><li>layer.open({</li><li>  type: 4,</li><li>  content: ['内容', '#id'] //数组第二项即吸附元素选择器或者DOM</li><li>});        </li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="skin">skin</a> - 样式类名</dt>
      <dd>
        <p><span>类型</span>：String，<span>默认</span>：''</p>
        <p>skin不仅允许你传入layer内置的样式class名，还可以传入您自定义的class名。这是一个很好的切入点，意味着你可以借助skin轻松完成不同的风格定制。目前layer内置的skin有：<code>layui-layer-lan</code><code>layui-layer-molv</code>，未来我们还会选择性地内置更多，但更推荐您自己来定义。以下是一个自定义风格的简单例子</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>        </li><li>//单个使用</li><li>layer.open({</li><li>  skin: 'demo-class'</li><li>});</li><li>//全局使用。即所有弹出层都默认采用，但是单个配置skin的优先级更高</li><li>layer.config({</li><li>  skin: 'demo-class'</li><li>})</li><li>//CSS </li><li>body .demo-class .layui-layer-title{background:#c00; color:#fff; border: none;}</li><li>body .demo-class .layui-layer-btn{border-top:1px solid #E9E7E7}</li><li>body .demo-class .layui-layer-btn a{background:#333;}</li><li>body .demo-class .layui-layer-btn .layui-layer-btn1{background:#999;}</li><li>…</li><li>加上body是为了保证优先级。你可以借助Chrome调试工具，定义更多样式控制层更多的区域。    </li><li>        </li></ol></pre>
        <p>你也可以<a class="layer-btn" href="http://layer.layui.com/skin.html#publish" target="_blank">去查看layer皮肤制作说明</a>  </p>
      </dd>
      
      <dt><a name="area">area</a> - 宽高</dt>
      <dd>
        <p><span>类型</span>：String/Array，<span>默认</span>：'auto'</p>
        <p>在默认状态下，layer是宽高都自适应的，但当你只想定义宽度时，你可以<code>area: '500px'</code>，高度仍然是自适应的。当你宽高都要定义时，你可以<code>area: ['500px', '300px']</code></p>
      </dd>
      
      <dt><a name="offset">offset</a> - 坐标</dt>
      <dd>
        <p><span>类型</span>：String/Array，<span>默认</span>：'auto'</p>
        <p>默认垂直水平居中。但当你只想定义top时，你可以<code>offset: '100px'</code>。当您top、left都要定义时，你可以<code>offset: ['100px', '200px']</code>。除此之外，你还可以定义<code>offset: 'rb'</code>，表示右下角。其它的特殊坐标，你可以自己计算赋值。</p>
      </dd>
      
      <dt><a name="icon">icon</a> - 图标。信息框和加载层的私有参数</dt>
      <dd>
        <p><span>类型</span>：Number，<span>默认</span>：-1（信息框）/0（加载层）</p>
        <p>信息框默认不显示图标。当你想显示图标时，默认皮肤可以传入<code>0-6</code>如果是加载层，可以传入<code>0-2</code>。如：</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>//eg1</li><li>layer.alert('酷毙了', {icon: 1});</li><li>//eg2</li><li>layer.msg('不开心。。', {icon: 5});</li><li>//eg3</li><li>layer.load(1); //风格1的加载</li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="btn">btn</a> - 按钮</dt>
      <dd>
        <p><span>类型</span>：String/Array，<span>默认</span>：'确认'</p>
        <p>信息框模式时，btn默认是一个确认按钮，其它层类型则默认不显示，加载层和tips层则无效。当您只想自定义一个按钮时，你可以<code>btn: '我知道了'</code>，当你要定义两个按钮时，你可以<code>btn: ['yes', 'no']</code>。当然，你也可以定义更多按钮，比如：<code>btn: ['按钮1', '按钮2', '按钮3', …]</code>，按钮1和按钮2的回调分别是yes和cancel，而从按钮3开始，则回调为btn3: function(){}，以此类推。如：</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>//eg1       </li><li>layer.confirm('纳尼？', {</li><li>  btn: ['按钮一', '按钮二', '按钮三'] //可以无限个按钮</li><li>  ,btn3: function(index, layero){</li><li>    //按钮【按钮三】的回调</li><li>  }</li><li>}, function(index, layero){</li><li>  //按钮【按钮一】的回调</li><li>}, function(index){</li><li>  //按钮【按钮二】的回调</li><li>});</li><li>//eg2</li><li>layer.open({</li><li>  content: 'test'</li><li>  ,btn: ['按钮一', '按钮二', '按钮三']</li><li>  ,yes: function(index, layero){</li><li>    //按钮【按钮一】的回调</li><li>  },btn2: function(index, layero){</li><li>    //按钮【按钮二】的回调</li><li>  },btn3: function(index, layero){</li><li>    //按钮【按钮三】的回调</li><li>  }</li><li>  ,cancel: function(){ </li><li>    //右上角关闭回调</li><li>  }</li><li>});</li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="closeBtn">closeBtn</a> - 关闭按钮</dt>
      <dd>
        <p><span>类型</span>：String/Boolean，<span>默认</span>：1</p>
        <p>layer提供了两种风格的关闭按钮，可通过配置<code>1</code>和<code>2</code>来展示，如果不显示，则<code>closeBtn: 0</code></p>
      </dd>
      
      <dt><a name="shade">shade</a> - 遮罩</dt>
      <dd>
        <p><span>类型</span>：String/Array/Boolean，<span>默认</span>：0.3</p>
        <p>即弹层外区域。默认是0.3透明度的黑色背景（'#000'）。如果你想定义别的颜色，可以<code>shade: [0.8, '#393D49']</code>；如果你不想显示遮罩，可以<code>shade: 0</code></p>
      </dd>
      
      <dt><a name="shadeClose">shadeClose</a> - 是否点击遮罩关闭</dt>
      <dd>
        <p><span>类型</span>：Boolean，<span>默认</span>：false</p>
        <p>如果你的shade是存在的，那么你可以设定shadeClose来控制点击弹层外区域关闭。</p>
      </dd>
      
      <dt><a name="time">time</a> - 自动关闭所需毫秒</dt>
      <dd>
        <p><span>类型</span>：Number，<span>默认</span>：0</p>
        <p>默认不会自动关闭。当你想自动关闭时，可以<code>time: 5000</code>，即代表5秒后自动关闭，注意单位是毫秒（1秒=1000毫秒）</p>
      </dd>
      
      <dt><a name="id">id</a> - 用于控制弹层唯一标识</dt>
      <dd>
        <p><span>类型</span>：String，<span>默认</span>：空字符</p>
        <p>设置该值后，不管是什么类型的层，都只允许同时弹出一个。一般用于页面层和iframe层模式</p>
      </dd>
      
      <dt><a name="shift">shift</a> - 动画</dt>
      <dd>
        <p><span>类型</span>：Number，<span>默认</span>：0</p>
        <p>从1.9开始，我们的出场动画全部采用CSS3。这意味着除了ie6-9，其它所有浏览器都是支持的。目前shift可支持的动画类型有<code>0-6</code></p>
      </dd>
      
      <dt><a name="maxmin">maxmin</a> - 最大最小化。</dt>
      <dd>
        <p><span>类型</span>：Boolean，<span>默认</span>：false</p>
        <p>该参数值对<code>type:1</code>和<code>type:2</code>有效。默认不显示最大小化按钮。需要显示配置<code>maxmin: true</code>即可</p>
      </dd>
      
      <dt><a name="fix">fix</a> - 固定</dt>
      <dd>
        <p><span>类型</span>：Boolean，<span>默认</span>：true</p>
        <p>即鼠标滚动时，层是否固定在可视区域。如果不想，设置<code>fix: false</code>即可</p>
      </dd>
      
      <dt><a name="scrollbar">scrollbar</a> - 是否允许浏览器出现滚动条</dt>
      <dd>
        <p><span>类型</span>：Boolean，<span>默认</span>：true</p>
        <p>默认允许浏览器滚动，如果设定<code>scrollbar: false</code>，则屏蔽</p>
      </dd>
      
      <dt><a name="maxWidth">maxWidth</a> - 最大宽度</dt>
      <dd>
        <p><span>类型</span>：，<span>默认</span>：360</p>
        <p>当<code>area: 'auto'</code>时，maxWidth的设定才有效。</p>
      </dd>
      
      <dt><a name="zIndex">zIndex</a> - 层叠顺序</dt>
      <dd>
        <p><span>类型</span>：，<span>默认</span>：19891014（贤心生日 0.0）</p>
        <p>一般用于解决和其它组件的层叠冲突。</p>
      </dd>
      
      <dt><a name="move">move</a> - 触发拖动的元素</dt>
      <dd>
        <p><span>类型</span>：String/DOM/Boolean，<span>默认</span>：'.layui-layer-title'</p>
        <p>默认是触发标题区域拖拽。如果你想单独定义，指向元素的选择器或者DOM即可。如<code>move: '.mine-move'</code>。你还配置设定<code>move: false</code>来禁止拖拽</p>
      </dd>
      
      <dt><a name="moveType">moveType</a> - 拖拽风格</dt>
      <dd>
        <p><span>类型</span>：Number，<span>默认</span>：0</p>
        <p>默认的拖拽风格正如你所见到的，会有个过度的透明框。但是如果你不喜欢，你可以设定<code>moveType: 1</code>切换到传统的拖拽模式</p>
      </dd>
      
      <dt><a name="moveOut">moveOut</a> - 是否允许拖拽到窗口外</dt>
      <dd>
        <p><span>类型</span>：Boolean，<span>默认</span>：false</p>
        <p>默认只能在窗口内拖拽，如果你想让拖到窗外，那么设定<code>moveOut: true</code>即可</p>
      </dd>
      
      <dt><a name="moveEnd">moveEnd</a> - 拖动完毕后的回调方法</dt>
      <dd>
        <p><span>类型</span>：Function，<span>默认</span>：null</p>
        <p>默认不会触发moveEnd，如果你需要，设定<code>moveEnd: function(){}</code>即可。</p>
      </dd>
      
      <dt><a name="tips">tips</a> - tips方向和颜色</dt>
      <dd>
        <p><span>类型</span>：Number/Array，<span>默认</span>：2</p>
        <p>tips层的私有参数。支持<code>上</code><code>右</code><code>下</code><code>左</code>四个方向，通过<code>1-4</code>进行方向设定。如<code>tips: 3</code>则表示在元素的下面出现。有时你还可能会定义一些颜色，可以设定<code>tips: [1, '#c00']</code></p>
      </dd>

      <dt><a name="tipsMore">tipsMore</a> - 是否允许多个tips</dt>
      <dd>
        <p><span>类型</span>：Boolean，<span>默认</span>：false</p>
        <p>允许多个意味着不会销毁之前的tips层。通过<code>tipsMore: true</code>开启</p>
      </dd>
      
      <dt><a name="success">success</a> - 层弹出后的成功回调方法</dt>
      <dd>
        <p><span>类型</span>：Function，<span>默认</span>：null</p>
        <p>当你需要在层创建完毕时即执行一些语句，可以通过该回调。success会携带两个参数，分别是<code>当前层DOM</code><code>当前层索引</code>。如：</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>layer.open({</li><li>  content: '测试回调',</li><li>  success: function(layero, index){</li><li>    console.log(layero, index);</li><li>  }</li><li>});        </li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="yes">yes</a> - 确定按钮回调方法</dt>
      <dd>
        <p><span>类型</span>：Function，<span>默认</span>：null</p>
        <p>该回调携带两个参数，分别为当前层索引、当前层DOM对象。如：</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>layer.open({</li><li>  content: '测试回调',</li><li>  yes: function(index, layero){</li><li>    //do something</li><li>    layer.close(index); //如果设定了yes回调，需进行手工关闭</li><li>  }</li><li>});        </li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="cancel">cancel</a> - 取消和关闭按钮触发的回调</dt>
      <dd>
        <p><span>类型</span>：Function，<span>默认</span>：null</p>
        <p>该回调同样只携带当前层索引一个参数，无需进行手工关闭。如果不想关闭，<code>return false</code>即可，如 cancel: function(index){ return false; } 则不会关闭；</p>
      </dd>
      
      <dt><a name="end">end</a> - 层销毁后触发的回调</dt>
      <dd>
        <p><span>类型</span>：Function，<span>默认</span>：null</p>
        <p>无论是确认还是取消，只要层被销毁了，end都会执行，不携带任何参数。</p>
      </dd>
      
      <dt><a name="full">full/min/restore</a> -分别代表最大化、最小化、还原 后触发的回调</dt>
      <dd>
        <p><span>类型</span>：Function，<span>默认</span>：null</p>
        <p>携带一个参数，即当前层DOM</p>
      </dd>
    </dl>
    
    <h2><a name="layer.config" style="color:#333;">内置方法</a></h2>
    
    <dl>
      <dt><a name="layer.config">layer.config(options)</a> - 初始化全局配置</dt>
      <dd>
        <p>这是一个可以重要也可以不重要的方法，重要的是，它的权利真的很大，尤其是在模块化加载layer时，你会发现你必须要用到它。它不仅可以配置一些诸如路径、加载的模块，甚至还可以决定整个弹层的默认参数。而说它不重要，是因为多数情况下，你会发现，你似乎不是那么十分需要它。但你真的需要认识一下这位伙计。</p>
        <p>如果您是采用<code>seajs</code>或者<code>requirejs</code>加载layer，你需要执行该方法来完成初始化的配置。比如：</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>layer.config({</li><li>  path: '/res/layer/' //layer.js所在的目录，可以是绝对目录，也可以是相对目录</li><li>});</li><li>//这样的话，layer就会去加载一些它所需要的配件，比如css等。  </li><li>//当然，你即便不用seajs或者requirejs，也可以通过上述方式设定路径             </li><li>        </li></ol></pre>
        <p>如果你是采用&lt;script src="?a.js&amp;layer.js"&gt;这种合并的方式引入layer，那么您需要在script标签上加一个自定义属性merge="true"。如：</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>&lt;script src="?a.js&amp;layer.js" merge="true"&gt;</li><li>这样的话，layer就不会去自动去获取路径，但你需要通过以下方式来完成初始化的配置</li><li>layer.config({</li><li>  path: '/res/layer/' //layer.js所在的目录，可以是绝对目录，也可以是相对目录</li><li>});</li><li>        </li></ol></pre>
        <p>但layer.config的作用远不止上述这样。它还可以配置层<code>默认的基础参数</code>，如：</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>layer.config({</li><li>  shift: 1, //默认动画风格</li><li>  skin: 'layui-layer-molv' //默认皮肤</li><li>  …</li><li>});</li><li>//除此之外，extend还允许你加载css。这对于layer的第三方皮肤有极大的帮助，如：</li><li>layer.config({</li><li>  extend: [</li><li>    'skin/layer-ext-myskin/style.css' //layer-ext-myskin即是你拓展的皮肤文件</li><li>  ]</li><li>});</li><li>//扩展css的规范：您必须在你扩展中的css文件加上这段</li><li>html #layui_layer_skinlayer-ext-myskinstylecss{display:none; position: absolute; width:1989px;}</li><li>规则就是：html #layui_layer_skin{文件夹名}{文件名}css</li><li>skin名以文件夹名为标准。</li><li>      </li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="layer.ready">layer.ready(path, callback)</a> - 初始化就绪</dt>
      <dd>
        <p>由于我们的layer内置了轻量级加载器，所以你根本不需要单独引入css等文件。但是加载总是需要过程的。当你在页面一打开就要执行弹层时，layer.ready()会是一个不错的帮手。它也可以做一些layer.config可以做的事，比如指向layer.js所在目录。但是如果你已经通过layer.config配置了path，你在使用layer.ready时，是不需要path的，如：</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>//页面一打开就执行弹层</li><li>layer.ready(function(){</li><li>  layer.msg('很高兴一开场就见到你');</li><li>});      </li><li>        </li></ol></pre>
        <p style="padding:10px 0; color:#999">我是华丽的酱油：介绍完上面两位引导者，接下来我们真正的主角闪亮登场了。此处应有掌声 ^,^</p>
      </dd>
      
      <dt><a name="layer.open">layer.open(options)</a> - 原始核心方法</dt>
      <dd>
        <p>基本上是露脸率最高的方法，不管是使用哪种方式创建层，都是走<code>layer.open()</code>，创建任何类型的弹层都会返回一个当前层索引，上述的<code>options即是基础参数</code>，另外，该文档<code>统一采用options作为基础参数的标识</code>例子：</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>var index = layer.open({</li><li>  content: 'test'</li><li>});</li><li>//拿到的index是一个重要的凭据，它是诸如layer.close(index)等方法的必传参数。       </li><li>        </li></ol></pre>
        <p style="color:#999">噢，请等等，上面这位主角的介绍篇幅怎么看怎么都觉得跟它的地位不符，作者在文档中只给了它如此可怜的一块地？？这是因为，它真的已经大众得不能再大众了，你真正需要了解的，是它的内部器官，即上面一大篇幅介绍的各种基础参数。 ←_←</p>
      </dd>
      
      <dt><a name="layer.alert">layer.alert(content, options, yes)</a> - 普通信息框</dt>
      <dd>
        <p>它的弹出似乎显得有些高调，一般用于对用户造成比较强烈的关注，类似系统alert，但却比alert更灵便。它的参数是自动向左补齐的。通过第二个参数，可以设定各种你所需要的基础参数，但如果你不需要的话，直接写回调即可。如</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>//eg1</li><li>layer.alert('只想简单的提示');        </li><li>//eg2</li><li>layer.alert('加了个图标', {icon: 1}); //这时如果你也还想执行yes回调，可以放在第三个参数中。</li><li>//eg3</li><li>layer.alert('有了回调', function(index){</li><li>  //do something</li><li>  </li><li>  layer.close(index);</li><li>});       </li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="layer.confirm">layer.confirm(content, options, yes, cancel)</a> - 询问框</dt>
      <dd>
        <p>类似系统confirm，但却远胜confirm，另外它<code>不是和系统的confirm一样阻塞</code>你需要把交互的语句放在回调体中。同样的，它的参数也是自动补齐的。</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>//eg1</li><li>layer.confirm('is not?', {icon: 3, title:'提示'}, function(index){</li><li>  //do something</li><li>  </li><li>  layer.close(index);</li><li>});</li><li>//eg2</li><li>layer.confirm('is not?', function(index){</li><li>  //do something</li><li>  </li><li>  layer.close(index);</li><li>});       </li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="layer.msg">layer.msg(content, options, end)</a> - 提示框</dt>
      <dd>
        <p>我在源码中有了相对较大的篇幅来定制了这个msg，目的是想将其打造成露脸率最高的提示框。而事实上我的确也在大量地使用它。因为它简单，而且足够得自觉，它不仅占据很少的面积，而且默认还会3秒后<code>自动消失</code>所有这一切都决定了我对msg的爱。因此<code>我赋予了她许多可能</code>在外形方面，它坚持简陋的变化，在作用方面，他坚持零用户操作。而且它的参数也是机会自动补齐的。</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>//eg1</li><li>layer.msg('只想弱弱提示');</li><li>//eg2</li><li>layer.msg('有表情地提示', {icon: 6}); </li><li>//eg3</li><li>layer.msg('关闭后想做些什么', function(){</li><li>  //do something</li><li>}); </li><li>//eg</li><li>layer.msg('同上', {</li><li>  icon: 1,</li><li>  time: 2000 //2秒关闭（如果不配置，默认是3秒）</li><li>}, function(){</li><li>  //do something</li><li>});   </li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="layer.load">layer.load(icon, options)</a> - 加载层</dt>
      <dd>
        <p>type:3的深度定制。load并不需要你传太多的参数，但如果你不喜欢默认的加载风格，你还有选择空间。icon支持传入<code>0-2</code>如果是0，无需传。另外特别注意一点：<code>load默认是不会自动关闭的</code>，因为你一般会在ajax回调体中关闭它。</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>//eg1</li><li>var index = layer.load();</li><li>//eg2</li><li>var index = layer.load(1); //换了种风格</li><li>//eg3</li><li>var index = layer.load(2, {time: 10*1000}); //又换了种风格，并且设定最长等待10秒 </li><li>//关闭</li><li>layer.close(index);     </li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="layer.tips">layer.tips(content, follow, options)</a> - tips层</dt>
      <dd>
        <p>type:4的深度定制。也是我本人比较喜欢的一个层类型，因为它拥有和msg一样的低调和自觉，而且会<code>智能定位</code>，即灵活地判断它应该出现在哪边。默认是在元素右边弹出</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>//eg1</li><li>layer.tips('只想提示地精准些', '#id');</li><li>//eg 2</li><li>$('#id').on('click', function(){</li><li>  var that = this;</li><li>  layer.tips('只想提示地精准些', that); //在元素的事件回调体中，follow直接赋予this即可</li><li>});</li><li>//eg 3</li><li>layer.tips('在上面', '#id', {</li><li>  tips: 1</li><li>});</li><li>        </li></ol></pre>
      </dd>
      
      <p style="padding-bottom:10px; color:#999">上面主要是一些弹层的调用方式，而下面介绍的是一些辅助性的方法</p>
      
      <dt><a name="layer.close">layer.close(index)</a> - 关闭特定层</dt>
      <dd>
        <p>关于它似乎没有太多介绍的必要，唯一让你疑惑的，可能就是这个<code>index</code>了吧</p>事实上它非常容易得到。
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>//当你想关闭当前页的某个层时</li><li>var index = layer.open();</li><li>var index = layer.alert();</li><li>var index = layer.load();</li><li>var index = layer.tips();</li><li>//正如你看到的，每一种弹层调用方式，都会返回一个index</li><li>layer.close(index); //此时你只需要把获得的index，轻轻地赋予layer.close即可</li><li>//当你在iframe页面关闭自身时</li><li>var index = parent.layer.getFrameIndex(window.name); //先得到当前iframe层的索引</li><li>parent.layer.close(index); //再执行关闭   </li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="layer.closeAll">layer.closeAll(type)</a> - 关闭所有层</dt>
      <dd>
        <p>如果你很懒，你<code>不想去获取index</code>你只想关闭。那么closeAll真的可以帮上你。如果你不指向层类型的话，它会销毁掉当前页所有的layer层。当然，如果你只想关闭某个类型的层，那么你可以</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>layer.closeAll(); //疯狂模式，关闭所有层</li><li>layer.closeAll('dialog'); //关闭信息框</li><li>layer.closeAll('page'); //关闭所有页面层</li><li>layer.closeAll('iframe'); //关闭所有的iframe层</li><li>layer.closeAll('loading'); //关闭加载层</li><li>layer.closeAll('tips'); //关闭所有的tips层    </li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="layer.style">layer.style(index, cssStyle)</a> - 重新定义层的样式</dt>
      <dd>
        <p>cssStyle允许你传入任意的css属性</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>//重新给指定层设定width、top等</li><li>layer.style(index, {</li><li>  width: '1000px',</li><li>  top: '10px'</li><li>});       </li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="layer.title">layer.title(title, index)</a> - 改变层的标题</dt>
      <dd>
        <p>使用方式：<code>layer.title('标题变了', index)</code></p>
      </dd>
      
      <dt><a name="layer.getChildFrame">layer.getChildFrame(selector, index)</a> - 获取iframe页的DOM</dt>
      <dd>
        <p>当你试图在当前页获取iframe页的DOM元素时，你可以用此方法。<code>selector即iframe页的选择器</code></p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>layer.open({</li><li>  type: 2,</li><li>  content: 'test/iframe.html',</li><li>  success: function(layero, index){</li><li>    var body = layer.getChildFrame('body', index);</li><li>    var iframeWin = window[layero.find('iframe')[0]['name']]; //得到iframe页的窗口对象，执行iframe页的方法：iframeWin.method();</li><li>    console.log(body.html()) //得到iframe页的body内容</li><li>    body.find('input').val('Hi，我是从父页来的')</li><li>  }</li><li>});       </li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="layer.getFrameIndex">layer.getFrameIndex(windowName)</a> - 获取特定iframe层的索引</dt>
      <dd>
        <p>此方法一般用于在iframe页关闭自身时用到。</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>//假设这是iframe页</li><li>var index = parent.layer.getFrameIndex(window.name); //先得到当前iframe层的索引</li><li>parent.layer.close(index); //再执行关闭        </li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="layer.iframeAuto">layer.iframeAuto(index)</a> - 指定iframe层自适应</dt>
      <dd>
        <p>调用该方法时，iframe层的高度会重新进行适应</p>
      </dd>
      
      <dt><a name="layer.iframeSrc">layer.iframeSrc(index, url)</a> - //重置特定iframe url</dt>
      <dd>
        <p>似乎不怎么常用的样子。使用方式：<code>layer.iframeSrc(index, 'http://sentsin.com')</code></p>
      </dd>
      
      <dt><a name="layer.setTop">layer.setTop(layero)</a> -置顶当前窗口 </dt>
      <dd>
        <p>非常强大的一个方法，虽然一般很少用。但是当你的页面有很多很多layer窗口，你需要像Window窗体那样，点击某个窗口，该窗体就置顶在上面，那么setTop可以来轻松实现。它采用巧妙的逻辑，以使这种置顶的性能达到最优</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>//通过这种方式弹出的层，每当它被选择，就会置顶。</li><li>layer.open({</li><li>  type: 2,</li><li>  shade: false,</li><li>  area: '500px',</li><li>  maxmin: true,</li><li>  content: 'http://www.layui.com',</li><li>  zIndex: layer.zIndex, //重点1</li><li>  success: function(layero){</li><li>    layer.setTop(layero); //重点2</li><li>  }</li><li>});     </li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="layer.full">layer.full()、layer.min()、layer.restore()</a> - 手工执行最大小化</dt>
      <dd>
        <p>（这三个酱油又一次被并列 ==。）一般用于在自定义元素上触发最大化、最小化和全屏。</p>
      </dd>      
    </dl>
    
    <h2><a name="layer.config" style="color:#333;">其他内置层</a></h2>
    <p>请注意，从2.3开始，无需通过layer.config来加载拓展模块。如果您是之前版本，则需通过下述方式来加载</p>
    <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>layer.config({</li><li>  extend: 'extend/layer.ext.js'</li><li>});     </li><li>    </li></ol></pre>
    <dl>
      <dt><a name="layer.prompt">layer.prompt(options, yes)</a> - 输入层</dt>
      <dd>
        <p>prompt的参数也是向前补齐的。options不仅可支持传入基础参数，还可以传入prompt专用的属性。当然，也可以不传。yes携带<code>value 表单值</code><code>index 索引</code><code>elem 表单元素</code></p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>//prompt层新定制的成员如下</li><li>{</li><li>  formType: 1, //输入框类型，支持<code>0（文本）默认</code><code>1（密码）</code><code>2（多行文本）</code></li><li>  value: '', //初始时的值，默认空字符</li><li>  maxlength: 140, //可输入文本的最大长度，默认500</li><li>}</li><li>//例子1</li><li>layer.prompt(function(value, index, elem){</li><li>  alert(value); //得到value</li><li>  layer.close(index);</li><li>});</li><li>//例子2</li><li>layer.prompt({</li><li>  formType: 2,</li><li>  value: '初始值',</li><li>  title: '请输入值'</li><li>}, function(value, index, elem){</li><li>  alert(value); //得到value</li><li>  layer.close(index);</li><li>});</li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="layer.tab">layer.tab(options)</a> - tab层</dt>
      <dd>
        <p>tab层只单独定制了一个成员，即<code>tab: []</code>，这个好像没有什么可介绍的，简单粗暴看例子</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>layer.tab({</li><li>  area: ['600px', '300px'],</li><li>  tab: [{</li><li>    title: 'TAB1', </li><li>    content: '内容1'</li><li>  }, {</li><li>    title: 'TAB2', </li><li>    content: '内容2'</li><li>  }, {</li><li>    title: 'TAB3', </li><li>    content: '内容3'</li><li>  }]</li><li>});        </li><li>        </li></ol></pre>
      </dd>
      
      <dt><a name="layer.photos">layer.photos(options)</a> - 相册层</dt>
      <dd>
        <p>相册层，也可以称之为图片查看器。它的出场动画从layer内置的动画类型中随机展现。photos支持传入json和直接读取页面图片两种方式。如果是json传入，如下：</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>$.getJSON('/jquery/layer/test/photos.json', function(json){</li><li>  layer.photos({</li><li>    photos: json</li><li>    ,shift: 5 //0-6的选择，指定弹出图片动画类型，默认随机</li><li>  });</li><li>}); </li><li>//而返回的json需严格按照如下格式：</li><li><pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>{</li><li>  "title": "", //相册标题</li><li>  "id": 123, //相册id</li><li>  "start": 0, //初始显示的图片序号，默认0</li><li>  "data": [   //相册包含的图片，数组格式</li><li>    {</li><li>      "alt": "图片名",</li><li>      "pid": 666, //图片id</li><li>      "src": "", //原图地址</li><li>      "thumb": "" //缩略图地址</li><li>    }</li><li>  ]</li><li>}</li><li></li></ol></pre></li><li>        </li></ol></pre>
        <p>如果是直接从页面中获取图片，那么需要指向图片的父容器，并且你的img可以设定一些规定的属性（但不是必须的）。</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>//HTML示例</li><li>&lt;div id="layer-photos-demo" class="layer-photos-demo"&gt;</li><li>  &lt;img layer-pid="图片id，可以不写" layer-src="大图地址" src="缩略图" alt="图片名"&gt;</li><li>  &lt;img layer-pid="图片id，可以不写" layer-src="大图地址" src="缩略图" alt="图片名"&gt;</li><li>&lt;/div&gt;</li><li>//调用示例</li><li>layer.ready(function(){ //为了layer.ext.js加载完毕再执行</li><li>  layer.photos({</li><li>    photos: '#layer-photos-demo'</li><li>    ,shift: 5 //0-6的选择，指定弹出图片动画类型，默认随机</li><li>  });</li><li>});   </li><li>        </li></ol></pre>
        <p>看看一个实例呗：</p>
        <div id="layer-photos-demo" class="layer-photos-demo">
          <img layer-src="//res.layui.com/images/fly/fly.jpg" layer-pid="" src="./layer API 帮助文档_files/fly.jpg" alt="说好的，一起Fly" layer-index="0">
          <img layer-src="//res.layui.com/images/fly/layim.jpg" layer-pid="" src="./layer API 帮助文档_files/layim.jpg" alt="LayIM" layer-index="1">
          <img layer-src="../images/tong.jpg" layer-pid="" src="./layer API 帮助文档_files/tong.jpg" alt="佟丽娅女神" layer-index="2">
          <img layer-src="//res.layui.com/images/sentsin/night.gif" layer-pid="" src="./layer API 帮助文档_files/night.gif" alt="星空如此深邃" layer-index="3">
        </div>
        <p>第二种方式的图片查看器显然更加简单，因为无需像第一种那样返回规定的json，但是他们还是有各自的应用场景的，你可以按照你的需求进行选择。另外，photos还有个tab回调，切换图片时触发。</p>
        <pre class="layui-code layui-box layui-code-view"><h3 class="layui-code-h3">code<a href="http://www.layui.com/doc/modules/code.html" target="_blank">layui.code</a></h3><ol class="layui-code-ol"><li>layer.photos({</li><li>  photos: json/选择器,</li><li>  tab: function(pic, layero){</li><li>    console.log(pic) //当前图片的一些信息</li><li>  }</li><li>});</li><li>        </li></ol></pre>
      </dd>
    </dl>
    <div class="layer-text">
      <p>合理地设定基础参数，合理地选择内置方法，合理地运用拓展方法，合理的心态，合理地阅读，只要一切都在合理的前提下，你才会感知到layer许许多多令人愉悦的地方，<em>她真的是否如你所愿，取决于你对她了解的深远</em>。愿layer能给你的web开发带来一段美妙的旅程。相信这一版的API文档，也会给你带来全新的便捷。别忘了在线调试。</p>
      <p></p>
    </div>
  </div>
</div>

<a href="javascript:;" class="layer_ico layer_gotop"></a>


<div class="layer-footer">
  <p>贤心出品 - sentsin.com</p>
  <p>
    <span><a href="javascript:;" onclick="paysentsin()">友情赞助</a></span>
    <span><a href="http://sentsin.com/cooperation.html">广告合作</a></span>
    <span><a href="http://weibo.com/SentsinXu" rel="nofollow" target="_blank">微博</a></span>
  </p>
</div>

<script src="./layer API 帮助文档_files/layui.js"></script>
<script src="./layer API 帮助文档_files/demo.js"></script>

<script>

</script>


<script async="" src="./layer API 帮助文档_files/adsbygoogle.js"></script>
<script>
var i = 0, len = jQuery('.adsbygoogle').length;
for(; i < len; i++){
  (adsbygoogle = window.adsbygoogle || []).push({});
}
</script>


<script type="text/javascript">var cnzz_protocol = (("https:" == document.location.protocol) ? " https://" : " http://");document.write(unescape("%3Cspan id='cnzz_stat_icon_30088308'%3E%3C/span%3E%3Cscript src='" + cnzz_protocol + "w.cnzz.com/c.php%3Fid%3D30088308' type='text/javascript'%3E%3C/script%3E"));</script><span id="cnzz_stat_icon_30088308"></span><script src="./layer API 帮助文档_files/c.php" type="text/javascript"></script>




<div class="layui-layer-move"></div><ul class="layui-fixbar"><li class="layui-icon" lay-type="bar1" style=""></li><li class="layui-icon layui-fixbar-top" lay-type="top" style="display: list-item;"></li></ul></body></html>